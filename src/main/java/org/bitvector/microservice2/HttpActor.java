package org.bitvector.microservice2;import akka.actor.AbstractActor;import akka.event.Logging;import akka.event.LoggingAdapter;import akka.japi.pf.ReceiveBuilder;import io.undertow.Handlers;import io.undertow.Undertow;import io.undertow.server.RoutingHandler;import io.undertow.util.Headers;import io.undertow.util.Methods;import java.io.Serializable;public class HttpActor extends AbstractActor {    private LoggingAdapter log = Logging.getLogger(getContext().system(), this);    private Undertow server = null;    public HttpActor() {        receive(ReceiveBuilder                        .match(Start.class, o -> this.start())                        .match(Stop.class, o -> this.stop())                        .matchAny(o -> log.error("HttpActor received unknown message " + o.toString()))                        .build()        );    }    private void start() {        RoutingHandler rootHandler = Handlers.routing()                .add(Methods.GET, "/products", exchange -> {                    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, "text/plain");                    exchange.getResponseSender().send("products\n");                })                .add(Methods.GET, "/products/{id}", exchange -> {                    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, "text/plain");                    exchange.getResponseSender().send("products" + exchange.getQueryParameters().get("id") + "\n");                })                .add(Methods.PUT, "/products/{id}", exchange -> {                    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, "text/plain");                    exchange.getResponseSender().send("products" + exchange.getQueryParameters().get("id") + "\n");                })                .add(Methods.POST, "/products", exchange -> {                    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, "text/plain");                    exchange.getResponseSender().send("products\n");                })                .add(Methods.DELETE, "/products/{id}", exchange -> {                    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, "text/plain");                    exchange.getResponseSender().send("products" + exchange.getQueryParameters().get("id") + "\n");                });        server = Undertow.builder()                .addHttpListener(8080, "0.0.0.0", rootHandler)                .build();        server.start();        log.info("HttpActor started");    }    private void stop() {        server.stop();        log.info("HttpActor stopped");    }    public static class Start implements Serializable {    }    public static class Stop implements Serializable {    }}